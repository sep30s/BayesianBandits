---
title: "Exploratory Data Analysis"
author: "Sara Parrish"
date: "`r format(Sys.time(), '%d %B, %Y')`"
date-format: "MMM D, YYYY"
format:
  html:
    link-external-icon: true
    link-external-newwindow: true
    toc: true
    toc-depth: 6
course: Capstone Projects in Data Science
bibliography: references.bib
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
theme: solar
---

```{css, echo=FALSE}
pre {
  max-height: 300px;
  overflow-y: auto;
}

```
# Dataset 1: Week 6 Deliverable
- The [dataset](https://www.transtats.bts.gov/DL_SelectFields.aspx?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr) was acquired from the Bureau of Transportation Statistics(BTS). The BTS allows for selective download from all of their available data on commercial delays (On-Time : Reporting Carrier On-Time Performance (1987-present)). The 'selective' option was not working with my attempts, so I filtered out the unwanted variables. The dataset initially comes with 110.  


```{r}
#| echo: false
library(knitr)

BTSdelays <- read.csv("Delays1.csv")

kable(head(BTSdelays)) 
``` 

```{r}
#| echo: false
dim(BTSdelays)
```

- The original dataset has 520,880 observations with 110 variables. We will retain Year, Month, Day of Month, Date of Week, Flight Date, Reporting Airline, Origin and Destination Airports, CRS Departure Time, Actual Departure Time, Departure Delay, Taxi Out Time, Wheels off Time, Wheels On Time, Taxi In Time, CRS Arrival Time, Arrival Time, Arrival Delay, Cancellation indicator, Cancellation Code,  Diverted indicator, CRS Elapsed Flight Time, Actual Elapsed Flight Time, Air Time, Carrier Delay, Weather Delay, NAS Delay, Security Delay, and Late Aircraft Delay. This will leave us with 29 variables. 

```{r}
#| echo: false
library(dplyr)
BTSdelays1 <- BTSdelays %>%
  select(Year, Month, DayofMonth, DayOfWeek, FlightDate, Reporting_Airline, Origin, Dest, CRSDepTime, DepTime, DepDelay, TaxiOut, WheelsOff, WheelsOn, TaxiIn, CRSArrTime, ArrTime, ArrDelay, Cancelled, CancellationCode, Diverted, CRSElapsedTime, ActualElapsedTime, AirTime, CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay)


dim(BTSdelays1)

kable(head(BTSdelays1))
```

- Cancellation code is not populated in the head of the table but possible values are: 

```{r}
#| echo: false
unique(BTSdelays1$CancellationCode)

```

- I plan on dividing the observations into groups based on departure times. There appear to be peaks around 9 a.m. (900), 11 a.m. and 3 p.m., but without more sophisticated analysis (like k-means clustering) to select groups, I make partitions for Morning (5 a.m. to noon), Afternoon (noon to 5 p.m.), and Evening (5 p.m.). 

```{r}
#| echo: false

library(ggplot2)


ggplot(BTSdelays1, aes(x=CRSDepTime)) +
  geom_histogram() +
  labs(title = "Histogram of Departure Times",
       x = "Departure Time", 
       y = "Frequency"
       )

BTSdelays1 <- BTSdelays1 %>%
  mutate(FlightPeriod = case_when(
    CRSDepTime >= 500 & CRSDepTime < 1200 ~ "Morning",
    CRSDepTime >= 1200 & CRSDepTime < 1700 ~ "Afternoon",
    CRSDepTime >= 1700 | CRSDepTime < 500 ~ "Evening"
  ))


ggplot(BTSdelays1, aes(x=FlightPeriod)) +
  geom_bar() +
  labs(title = "Flights Departing by Time of Day",
       x = "Time Period", 
       y = "Flights Departing"
       )
```


- I'm interested in visualizing the dataset to see if there are any obvious trends with delay types so I used a scatterplot to show the relation between the delay minutes (of an individual delay type - multiple delays can be credited to the delay time of a single flight) and the total arrival delay of the aircraft. 

```{r}
#| echo: false
```
library(tidyr)
library(ggplot2)

long_delays <- BTSdelays1 %>%
  pivot_longer(
    cols = c(CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay),
    names_to = "DelayType", values_to = "DelayMinutes") %>%
  replace_na(list(DelayMinutes = 0)
             )

ggplot(long_delays, aes(x = DelayMinutes, y = ArrDelay, color = DelayType)) +
  geom_point(alpha = 0.5) +
  scale_color_manual(
    values = c("CarrierDelay" = "blue", "WeatherDelay" = "green", 
               "NASDelay" = "red", "SecurityDelay" = "purple", 
               "LateAircraftDelay" = "yellow")) +
  labs(x = "Delay Minutes (min)", y = "Arrival Delay (min)", color = "Delay Type") +
  theme_minimal()

- As you can see, Delay Minutes cannot be less than total Arrival Delay. There also appears to be a trend with delays attributed to the carrier causing a lengthier setbacks. 

- The values of the variables chosen for the table 1 were calculated using R in RStudio and formatted in Google Sheets and [tablesgenerator.com](https://www.tablesgenerator.com/html_tables#). 

```{r}
#| echo: false

BTSdelays1 <- BTSdelays1 %>%
  mutate(FlightDate = as.Date(FlightDate, format = "%Y-%m-%d"))



table1 <- BTSdelays1 %>%
  group_by(FlightPeriod) %>%
  summarise(
    TotalFlights = n(),
    TotalUniqueDates = n_distinct(FlightDate),
    TotalUniqueOrigins = n_distinct(Origin),
    TotalUniqueDestinations = n_distinct(Dest),
    AvgCRSDepTime = mean(CRSDepTime, na.rm = TRUE),
    AvgDepTime = mean(DepTime, na.rm = TRUE),
    AvgDepDelay = mean(DepDelay, na.rm = TRUE),
    AvgTaxiOut = mean(TaxiOut, na.rm = TRUE),
    AvgTaxiIn = mean(TaxiIn, na.rm = TRUE),
    AvgCRSArrTime = mean(CRSArrTime, na.rm = TRUE),
    AvgArrTime = mean(ArrTime, na.rm = TRUE),
    AvgArrDelay = mean(ArrDelay, na.rm = TRUE),
    AvgAirTime = mean(AirTime, na.rm = TRUE),
    CancelledFlights = sum(Cancelled, na.rm = TRUE),
    DivertedFlights = sum(Diverted, na.rm = TRUE), 
    CarrierDelay = mean(CarrierDelay, na.rm = TRUE),
    SecurityDelay = mean(SecurityDelay, na.rm = TRUE),
    WeatherDelay = mean(WeatherDelay, na.rm = TRUE),
    NASDelay = mean(NASDelay, na.rm = TRUE),
    LateAircraftDelay = mean(LateAircraftDelay, na.rm = TRUE),
  )

table1.1 <- BTSdelays1 %>%
  summarise(
    TotalFlights = n(),
    TotalUniqueDates = n_distinct(FlightDate),
    TotalUniqueOrigins = n_distinct(Origin),
    TotalUniqueDestinations = n_distinct(Dest),
    AvgCRSDepTime = mean(CRSDepTime, na.rm = TRUE),
    AvgDepTime = mean(DepTime, na.rm = TRUE),
    AvgDepDelay = mean(DepDelay, na.rm = TRUE),
    AvgTaxiOut = mean(TaxiOut, na.rm = TRUE),
    AvgTaxiIn = mean(TaxiIn, na.rm = TRUE),
    AvgCRSArrTime = mean(CRSArrTime, na.rm = TRUE),
    AvgArrTime = mean(ArrTime, na.rm = TRUE),
    AvgArrDelay = mean(ArrDelay, na.rm = TRUE),
    AvgAirTime = mean(AirTime, na.rm = TRUE),
    CancelledFlights = sum(Cancelled, na.rm = TRUE),
    DivertedFlights = sum(Diverted, na.rm = TRUE), 
    CarrierDelay = mean(CarrierDelay, na.rm = TRUE),
    SecurityDelay = mean(SecurityDelay, na.rm = TRUE),
    WeatherDelay = mean(WeatherDelay, na.rm = TRUE),
    NASDelay = mean(NASDelay, na.rm = TRUE),
    LateAircraftDelay = mean(LateAircraftDelay, na.rm = TRUE),
  )



kable(print(table1))
kable(print(table1.1))
```


<style type="text/css">
.tg  {border-collapse:collapse;border-color:#9ABAD9;border-spacing:0;}
.tg td{background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;
  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{background-color:#409cff;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#fff;
  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-gagn{border-color:#ffffff;text-align:right;vertical-align:bottom}
.tg .tg-nwho{background-color:#3166ff;border-color:#ffffff;
  font-family:"Lucida Sans Unicode", "Lucida Grande", sans-serif !important;text-align:left;vertical-align:bottom}
.tg .tg-aunz{background-color:#3166ff;border-color:#ffffff;
  font-family:"Lucida Sans Unicode", "Lucida Grande", sans-serif !important;font-weight:bold;text-align:center;
  vertical-align:bottom}
.tg .tg-n0of{border-color:#ffffff;font-weight:bold;text-align:left;vertical-align:bottom}
</style>
<table class="tg" style="undefined;table-layout: fixed; width: 669px"><colgroup>
<col style="width: 196px">
<col style="width: 114px">
<col style="width: 122px">
<col style="width: 124px">
<col style="width: 113px">
</colgroup>
<thead>
  <tr>
    <th class="tg-nwho">Flight Period </th>
    <th class="tg-aunz">Morning</th>
    <th class="tg-aunz">Afternoon</th>
    <th class="tg-aunz">Evening</th>
    <th class="tg-aunz">All</th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-n0of">Total Flights</td>
    <td class="tg-gagn">213797 (41%)</td>
    <td class="tg-gagn">156449 (30%)</td>
    <td class="tg-gagn">150634 (29%)</td>
    <td class="tg-gagn">520880</td>
  </tr>
  <tr>
    <td class="tg-n0of">Total Unique Dates<br></td>
    <td class="tg-gagn">31</td>
    <td class="tg-gagn">31</td>
    <td class="tg-gagn">31</td>
    <td class="tg-gagn">31</td>
  </tr>
  <tr>
    <td class="tg-n0of">Total Unique Origins<br></td>
    <td class="tg-gagn">302</td>
    <td class="tg-gagn">294</td>
    <td class="tg-gagn">274</td>
    <td class="tg-gagn">315</td>
  </tr>
  <tr>
    <td class="tg-n0of">Total Unique Destinations<br></td>
    <td class="tg-gagn">287</td>
    <td class="tg-gagn">294</td>
    <td class="tg-gagn">294</td>
    <td class="tg-gagn">315</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average CRS Departure Time<br></td>
    <td class="tg-gagn">853.77</td>
    <td class="tg-gagn">1426.76</td>
    <td class="tg-gagn">1906.42</td>
    <td class="tg-gagn">1330.29</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Departure Time<br></td>
    <td class="tg-gagn">858.66</td>
    <td class="tg-gagn">1447.71</td>
    <td class="tg-gagn">1908.66</td>
    <td class="tg-gagn">1337.15</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Departure Delay<br></td>
    <td class="tg-gagn">4.92</td>
    <td class="tg-gagn">14.00</td>
    <td class="tg-gagn">20.19</td>
    <td class="tg-gagn">12.04</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Taxi Out<br></td>
    <td class="tg-gagn">15.20</td>
    <td class="tg-gagn">15.97</td>
    <td class="tg-gagn">16.10</td>
    <td class="tg-gagn">15.69</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Taxi In<br></td>
    <td class="tg-gagn">7.31</td>
    <td class="tg-gagn">7.32</td>
    <td class="tg-gagn">6.92</td>
    <td class="tg-gagn">7.20</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average CRS Arrival Time<br></td>
    <td class="tg-gagn">1085.59</td>
    <td class="tg-gagn">1641.12</td>
    <td class="tg-gagn">1897.6</td>
    <td class="tg-gagn">1487.28</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Arrival Time<br></td>
    <td class="tg-gagn">1088.49</td>
    <td class="tg-gagn">1651.34</td>
    <td class="tg-gagn">1809.68</td>
    <td class="tg-gagn">1464.60</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Arrival Delay<br></td>
    <td class="tg-gagn">1.67</td>
    <td class="tg-gagn">11.23</td>
    <td class="tg-gagn">16.45</td>
    <td class="tg-gagn">8.78</td>
  </tr>
  <tr>
    <td class="tg-n0of">Average Air Time<br></td>
    <td class="tg-gagn">113.81</td>
    <td class="tg-gagn">108.13</td>
    <td class="tg-gagn">114.32</td>
    <td class="tg-gagn">112.25</td>
  </tr>
  <tr>
    <td class="tg-n0of">Cancelled Flights<br></td>
    <td class="tg-gagn">2417 (29%)</td>
    <td class="tg-gagn">2410 (29%)</td>
    <td class="tg-gagn">3563 (42%)</td>
    <td class="tg-gagn">8390</td>
  </tr>
  <tr>
    <td class="tg-n0of">Diverted Flights<br></td>
    <td class="tg-gagn">460 (31%)</td>
    <td class="tg-gagn">636 (43%)</td>
    <td class="tg-gagn">391 (26%)</td>
    <td class="tg-gagn">1487</td>
  </tr>
  <tr>
    <td class="tg-n0of">Carrier Delay<br></td>
    <td class="tg-gagn">24.74</td>
    <td class="tg-gagn">15.90</td>
    <td class="tg-gagn">15.62</td>
    <td class="tg-gagn">17.93</td>
  </tr>
  <tr>
    <td class="tg-n0of">Security Delay<br></td>
    <td class="tg-gagn">0.0552</td>
    <td class="tg-gagn">0.0326</td>
    <td class="tg-gagn">0.0531</td>
    <td class="tg-gagn">0.0466</td>
  </tr>
  <tr>
    <td class="tg-n0of">Weather Delay<br></td>
    <td class="tg-gagn">1.71</td>
    <td class="tg-gagn">3.17</td>
    <td class="tg-gagn">2.95</td>
    <td class="tg-gagn">2.72</td>
  </tr>
  <tr>
    <td class="tg-n0of">NAS Delay<br></td>
    <td class="tg-gagn">15.05</td>
    <td class="tg-gagn">14.51</td>
    <td class="tg-gagn">10.15</td>
    <td class="tg-gagn">12.83</td>
  </tr>
  <tr>
    <td class="tg-n0of">Late Aircraft Delay<br></td>
    <td class="tg-gagn">13.50</td>
    <td class="tg-gagn">24.41</td>
    <td class="tg-gagn">32.37</td>
    <td class="tg-gagn">25.07</td>
  </tr>
</tbody></table>


- Total unique dates for the 520,880 entries only came out to be 31. This was not an error with the data, but in the download from the BTS as only the month of July from 2014 was selected. 
- The averages were taken for many of the variables, but this information does not give much insight on the variables whose value is a time of day. 
- Average departure and arrival delay, and average air time are in minutes. 
- Variables with count data, total flights, cancelled flights, and diverted flights, can be seen with their percentages. 
- An attempt was made, in various ways with a few different R packages, to get a count of the delay types for each flight period. The attempt failed, largely due to the group_by function. 
- Moving forward, it would be pertinent to quantify more of the information in this dataset so that it is more digestible in the format of a table 1. 




# Dataset 2 : Week 7 Deliverable
## Flight Delays and Cancellations from the Bureau of Transportation Statistics
Compiled by Patrick Zelazko
<https://www.kaggle.com/datasets/patrickzel/flight-delay-and-cancellation-dataset-2019-2023?resource=download>


### Following are the definitions of the given variables in this dataset. 

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}
.tg td{border-bottom-width:1px;border-color:black;border-style:solid;border-top-width:1px;border-width:0px;
  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-bottom-width:1px;border-color:black;border-style:solid;border-top-width:1px;border-width:0px;
  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-83kh{background-color:#002b36;border-color:#ffffff;color:#ffffff;font-family:"Times New Roman", Times, serif !important;
  font-size:large;font-weight:bold;position:-webkit-sticky;position:sticky;text-align:center;top:-1px;
  vertical-align:top;will-change:transform}
.tg .tg-9nvq{background-color:#002b36;border-color:#002b36;color:#ffffff;font-family:"Times New Roman", Times, serif !important;
  text-align:center;vertical-align:middle}
.tg .tg-kr5n{background-color:#002b36;border-color:#ffffff;color:#ffffff;font-family:"Times New Roman", Times, serif !important;
  text-align:left;vertical-align:middle}
.tg .tg-su5p{background-color:#002b36;border-color:#ffffff;color:#ffffff;font-family:"Times New Roman", Times, serif !important;
  text-align:center;vertical-align:middle}
@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;margin: auto 0px;}}</style>
<div class="tg-wrap"><table class="tg"><thead>
  <tr>
    <th class="tg-83kh">Header</th>
    <th class="tg-83kh">Description</th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-9nvq">Fl Date</td>
    <td class="tg-kr5n">Flight Date (yyyy-mm-dd)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Airline</td>
    <td class="tg-kr5n">Airline Name</td>
  </tr>
  <tr>
    <td class="tg-su5p">Airline DOT</td>
    <td class="tg-kr5n">Airline Name and Unique Carrier Code. When the same code has been used by multiple carriers, a numeric suffix is used for earlier users, for example, PA, PA(1), PA(2). Use this field for analysis across a range of years.</td>
  </tr>
  <tr>
    <td class="tg-su5p">Airline Code</td>
    <td class="tg-kr5n">Unique Carrier Code</td>
  </tr>
  <tr>
    <td class="tg-su5p">DOT Code</td>
    <td class="tg-kr5n">An identification number assigned by US DOT to identify a unique airline (carrier). A unique airline (carrier) is defined as one holding and reporting under the same DOT certificate regardless of its Code, Name, or holding company/corporation.</td>
  </tr>
  <tr>
    <td class="tg-su5p">Fl Number</td>
    <td class="tg-kr5n">Flight Number</td>
  </tr>
  <tr>
    <td class="tg-su5p">Origin</td>
    <td class="tg-kr5n">Origin Airport, Airport ID. An identification number assigned by US DOT to identify a unique airport. Use this field for airport analysis across a range of years because an airport can change its airport code and airport codes can be reused.</td>
  </tr>
  <tr>
    <td class="tg-su5p">Origin City</td>
    <td class="tg-kr5n">Origin City Name, State Code</td>
  </tr>
  <tr>
    <td class="tg-su5p">Dest</td>
    <td class="tg-kr5n">Destination Airport, Airport ID.   An identification number assigned by US DOT to identify a unique airport. Use this field for airport analysis across a range of years because an airport can change its airport code and airport codes can be reused.</td>
  </tr>
  <tr>
    <td class="tg-su5p">Dest City</td>
    <td class="tg-kr5n">Destination City Name, State   Code</td>
  </tr>
  <tr>
    <td class="tg-su5p">CRS Dep Time</td>
    <td class="tg-kr5n">CRS Departure Time (local time: hhmm)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Dep Time</td>
    <td class="tg-kr5n">Actual Departure Time (local time: hhmm)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Dep Delay</td>
    <td class="tg-kr5n">Difference in minutes between scheduled and actual departure time. Early departures show negative numbers.</td>
  </tr>
  <tr>
    <td class="tg-su5p">Taxi Out</td>
    <td class="tg-kr5n">Taxi Out Time, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Wheels Off</td>
    <td class="tg-kr5n">Wheels Off Time (local time: hhmm)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Wheels On</td>
    <td class="tg-kr5n">Wheels On Time (local time: hhmm)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Taxi In</td>
    <td class="tg-kr5n">Taxi In Time, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">CRS Arr Time</td>
    <td class="tg-kr5n">CRS Arrival Time (local time: hhmm)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Arr Time</td>
    <td class="tg-kr5n">Actual Arrival Time (local time: hhmm)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Arr Delay</td>
    <td class="tg-kr5n">Difference in minutes between scheduled and actual arrival time. Early arrivals show negative numbers.</td>
  </tr>
  <tr>
    <td class="tg-su5p">Cancelled</td>
    <td class="tg-kr5n">Cancelled Flight Indicator   (1=Yes)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Cancellation Code</td>
    <td class="tg-kr5n">Specifies The Reason For Cancellation</td>
  </tr>
  <tr>
    <td class="tg-su5p">Diverted</td>
    <td class="tg-kr5n">Diverted Flight Indicator   (1=Yes)</td>
  </tr>
  <tr>
    <td class="tg-su5p">CRS Elapsed Time</td>
    <td class="tg-kr5n">CRS Elapsed Time of Flight, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Actual Elapsed Time</td>
    <td class="tg-kr5n">Elapsed Time of Flight, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Air Time</td>
    <td class="tg-kr5n">Flight Time, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Distance</td>
    <td class="tg-kr5n">Distance between airports (miles)</td>
  </tr>
  <tr>
    <td class="tg-su5p">Carrier Delay</td>
    <td class="tg-kr5n">Carrier Delay, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Weather Delay</td>
    <td class="tg-kr5n">Weather Delay, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">NAS Delay</td>
    <td class="tg-kr5n">National Air System Delay, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Security Delay</td>
    <td class="tg-kr5n">Security Delay, in Minutes</td>
  </tr>
  <tr>
    <td class="tg-su5p">Late  Aircraft Delay</td>
    <td class="tg-kr5n">Late Aircraft Delay, in Minutes</td>
  </tr>
</tbody></table></div>



```{r}
#| echo: false
#| 
library(knitr)

Delays <- read.csv("Kaggle_flights.csv")


```



### Table 1 for the dataset. 


<details>
<summary>Click to view code</summary>

```{r}
#| echo: false

library(tidyr)
library(gt)
library(dplyr)

# remove NA's, set lowercase

Delays1 <- Delays %>%
  mutate(
    DELAY_DUE_CARRIER = replace_na(DELAY_DUE_CARRIER, 0),
    DELAY_DUE_WEATHER = replace_na(DELAY_DUE_WEATHER, 0),
    DELAY_DUE_NAS = replace_na(DELAY_DUE_NAS, 0),
    DELAY_DUE_SECURITY = replace_na(DELAY_DUE_SECURITY, 0),
    DELAY_DUE_LATE_AIRCRAFT = replace_na(DELAY_DUE_LATE_AIRCRAFT, 0)
  ) %>%
  rename_with(tolower) %>%
  rename(
    carrier_delay = delay_due_carrier,
    weather_delay = delay_due_weather,
    nas_delay = delay_due_nas,
    security_delay = delay_due_security,
    lateaircraft_delay = delay_due_late_aircraft
  ) %>%
  round()

#Math for table 1

Table1.2 <- Delays1 %>%
  mutate(flight_period = case_when(
    crs_dep_time >= 400 & crs_dep_time < 1200 ~ "Morning",
    crs_dep_time >= 1200 & crs_dep_time < 2000 ~ "Afternoon",
    crs_dep_time >= 2000 | crs_dep_time < 400 ~ "Evening" )) %>%
  group_by(flight_period) %>%
  summarize(
    TotalFlights = n(),
    TotalUniqueDates = n_distinct(fl_date),
    TotalUniqueOrigins = n_distinct(origin),
    TotalUniqueDestinations = n_distinct(dest),
    AvgCRSDepTime = mean(crs_dep_time, na.rm = TRUE),
    AvgDepTime = mean(dep_time, na.rm = TRUE),
    AvgDepDelay = round(mean(dep_delay, na.rm = TRUE), 2),
    AvgTaxiOut = round(mean(taxi_out, na.rm = TRUE), 2),
    AvgTaxiIn = round(mean(taxi_in, na.rm = TRUE), 2),
    AvgCRSArrTime = mean(crs_arr_time, na.rm = TRUE),
    AvgArrTime = mean(arr_time, na.rm = TRUE),
    AvgArrDelay = round(mean(arr_delay, na.rm = TRUE), 2),
    AvgAirTime = round(mean(air_time, na.rm = TRUE), 2),
    CancelledFlights = sum(cancelled, na.rm = TRUE),
    DivertedFlights = sum(diverted, na.rm = TRUE), 
    AvgCarrierDelay = round(mean(carrier_delay, na.rm = TRUE), 2),
    AvgSecurityDelay = round(mean(security_delay, na.rm = TRUE), 2),
    AvgWeatherDelay = round(mean(weather_delay, na.rm = TRUE), 2),
    AvgNASDelay = round(mean(nas_delay, na.rm = TRUE), 2),
    AvgLateAircraftDelay = round(mean(lateaircraft_delay, na.rm = TRUE), 2),
    CarrierDelay_ct = sum(carrier_delay > 0),
    SecurityDelay_ct = sum(security_delay > 0),
    WeatherDelay_ct = sum(weather_delay > 0),
    NASDelay_ct = sum(nas_delay > 0),
    LateAircraftDelay_ct = sum(lateaircraft_delay > 0)) %>%
  ungroup() %>%
  mutate(
    TotalFlightsCount = sprintf("%d (%.1f%%)", TotalFlights, 100 * TotalFlights / sum(TotalFlights)),
    CancelledFlightsCount = sprintf("%d (%.1f%%)", CancelledFlights, 100 * CancelledFlights / sum(CancelledFlights)),
    DivertedFlightsCount = sprintf("%d (%.1f%%)", DivertedFlights, 100 * DivertedFlights / sum(DivertedFlights)),
    CarrierDelayCount = sprintf("%d (%.1f%%)", CarrierDelay_ct, 100 * CarrierDelay_ct / sum(CarrierDelay_ct)),
    SecurityDelayCount = sprintf("%d (%.1f%%)", SecurityDelay_ct, 100 * SecurityDelay_ct / sum(SecurityDelay_ct)),
    WeatherDelayCount = sprintf("%d (%.1f%%)", WeatherDelay_ct, 100 * WeatherDelay_ct / sum(WeatherDelay_ct)),
    NASDelayCount = sprintf("%d (%.1f%%)", NASDelay_ct, 100 * NASDelay_ct / sum(NASDelay_ct)),
    LateAircraftDelayCount = sprintf("%d (%.1f%%)", LateAircraftDelay_ct, 100 * LateAircraftDelay_ct / sum(LateAircraftDelay_ct))
  )

Table1.2_total <- Delays1 %>%
  summarize(
    flight_period = "Total",
    TotalFlights = n(),
    TotalUniqueDates = n_distinct(fl_date),
    TotalUniqueOrigins = n_distinct(origin),
    TotalUniqueDestinations = n_distinct(dest),
    AvgCRSDepTime = mean(crs_dep_time, na.rm = TRUE),
    AvgDepTime = mean(dep_time, na.rm = TRUE),
    AvgDepDelay = round(mean(dep_delay, na.rm = TRUE), 2),
    AvgTaxiOut = round(mean(taxi_out, na.rm = TRUE), 2),
    AvgTaxiIn = round(mean(taxi_in, na.rm = TRUE), 2),
    AvgCRSArrTime = mean(crs_arr_time, na.rm = TRUE),
    AvgArrTime = mean(arr_time, na.rm = TRUE),
    AvgArrDelay = round(mean(arr_delay, na.rm = TRUE), 2),
    AvgAirTime = round(mean(air_time, na.rm = TRUE), 2),
    CancelledFlights = sum(cancelled, na.rm = TRUE),
    DivertedFlights = sum(diverted, na.rm = TRUE), 
    AvgCarrierDelay = round(mean(carrier_delay, na.rm = TRUE), 2),
    AvgSecurityDelay = round(mean(security_delay, na.rm = TRUE), 2),
    AvgWeatherDelay = round(mean(weather_delay, na.rm = TRUE), 2),
    AvgNASDelay = round(mean(nas_delay, na.rm = TRUE), 2),
    AvgLateAircraftDelay = round(mean(lateaircraft_delay, na.rm = TRUE), 2),
    CarrierDelay_ct = sum(carrier_delay > 0),
    SecurityDelay_ct = sum(security_delay > 0),
    WeatherDelay_ct = sum(weather_delay > 0),
    NASDelay_ct = sum(nas_delay > 0),
    LateAircraftDelay_ct = sum(lateaircraft_delay > 0)) %>%
  mutate(
    TotalFlightsCount = sprintf("%d (100%%)", TotalFlights),
    CancelledFlightsCount = sprintf("%d (100%%)", CancelledFlights),
    DivertedFlightsCount = sprintf("%d (100%%)", DivertedFlights),
    CarrierDelayCount = sprintf("%d (100%%)", CarrierDelay_ct),
    SecurityDelayCount = sprintf("%d (100%%)", SecurityDelay_ct),
    WeatherDelayCount = sprintf("%d (100%%)", WeatherDelay_ct),
    NASDelayCount = sprintf("%d (100%%)", NASDelay_ct),
    LateAircraftDelayCount = sprintf("%d (100%%)", LateAircraftDelay_ct)
  )

Table1.2_combined <- bind_rows(Table1.2, Table1.2_total)



library(lubridate)

# Converting time HHMM.SS to HH:MM:SS

convert_to_time <- function(time_val) {
  rounded_time <- round(time_val, 2)
  hours <- floor(rounded_time / 100)
  minutes_with_secs <- (rounded_time %% 100)
  minutes <- floor(minutes_with_secs)
  seconds <- round((minutes_with_secs - minutes) * 60, 0)
  time_formatted <- sprintf("%02d:%02d:%02d", hours, minutes, seconds)
  return(time_formatted)
}

#Apply time conversion, remove extra rows

Table1.3_combined <- Table1.2_combined %>%
  mutate(
    AvgCRSDepTime = sapply(AvgCRSDepTime, convert_to_time),
    AvgDepTime = sapply(AvgDepTime, convert_to_time),
    AvgCRSArrTime = sapply(AvgCRSArrTime, convert_to_time),
    AvgArrTime = sapply(AvgArrTime, convert_to_time),
  ) %>%
  mutate(across(-flight_period, as.character)
  ) %>%
  select(
    flight_period,
    TotalFlightsCount,
    CancelledFlightsCount,
    DivertedFlightsCount,
    AvgCRSDepTime,
    AvgDepTime,
    AvgDepDelay,
    AvgTaxiOut,
    AvgTaxiIn,
    AvgCRSArrTime,
    AvgArrTime,
    AvgArrDelay,
    AvgAirTime,
    CarrierDelayCount,
    SecurityDelayCount,
    WeatherDelayCount,
    NASDelayCount,
    LateAircraftDelayCount
  )

#Pivot table

Table1.3_pivoted <- Table1.3_combined %>% 
  pivot_longer(
    cols = -flight_period,
    names_to = "Statistic", 
    values_to = "Value") %>% 
  pivot_wider(
    names_from = flight_period,
    values_from = Value
)

#gt Table1

Table1.3_pivoted %>%
  gt() %>%
  tab_header(
    title = "Flight Delay Summary by Flight Period"
  ) %>%
  cols_label(
    Statistic = "Flight Period",
    Morning = "Morning",
    Afternoon = "Afternoon",
    Evening = "Evening",
    Total = "Total"
  ) %>%
  tab_spanner(
    label = "Flight Period",
    columns = c(Morning, Afternoon, Evening, Total)
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "white"), 
      cell_fill(color = "rgba(0, 43, 54, 1)")
    ),
    locations = cells_body(
      columns = everything()
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "white"),
      cell_fill(color = "rgba(0, 43, 54, 1)")
    ),
    locations = cells_column_labels(
      columns = everything()
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "white", weight = "bold"),
      cell_fill(color = "rgba(0, 43, 54, 1)")
    ),
    locations = cells_title(
      groups = c("title", "subtitle")
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "white", weight = "bold"),
      cell_fill(color = "rgba(0, 43, 54, 1)")
    ),
    locations = cells_column_spanners(
      spanners = everything()
    )
  ) %>%
  tab_source_note(
    source_note = "Table 1: Summary includes morning, afternoon, and evening flight periods."
  )

```
</details>


  The three flight periods are each comprised of 8-hour segments (i.e. Morning has flights with departure times from 4am to noon followed by afternoon and evening). The Afternoon period is comprised of the most flights (47.4%), followed closely by the Morning period (41.5%), and the Evening period trails the two (11%). The table also gives the means of the departure and arrival times, giving an indication of the density of the flights in the given period. The average departure and arrival delays show much better numbers for the Morning period (5.23, -0.77 minutes) with increasing delays for the Afternoon and Evening periods. The delay counts by type show That the Afternoon and Morning periods account for significantly more of the total delays, though that is without taking into account the smaller contribution of flights by the Evening period on the whole. 


### Some Visualizations of the Dataset

```{r}
#| echo: false
library(ggplot2)


Delays %>%
  pivot_longer(cols = c(DEP_DELAY, AIR_TIME, ARR_DELAY), 
               names_to = "Variable", 
               values_to = "Value") %>%
  ggplot(aes(x = Value)) +
  geom_histogram(bins = 25, fill = "blue", alpha = 0.5) +
  facet_wrap(~ Variable, scales = "free") +
  labs(title = "Histograms of Air Time and Flight Delays",
       x = "Time in Minutes",
       y = "Square Root of Frequency") +
  xlim(NA, 650)+
  scale_y_sqrt()

```

- These histograms illustrate the frequencies of air time, arrival delays, and departure delays. The y-axis was transformed to make the visualizations more legible. All show a skew to the right. This makes sense for air times with a higher proportion of regional flights and the exclusion of international departures and arrivals. Shorter delays (for both arrivals and departures) being more frequent than longer delays is also to be expected. 

```{r}
#| echo: false
carrier_summary_ci <- Delays1 %>%
  group_by(airline_code) %>%
  summarise(
    carrier_name = first(airline),
    avg_arr_delay = mean(arr_delay, na.rm = TRUE),
    n = n(),
    sd_arr_delay = sd(arr_delay, na.rm = TRUE)
  ) %>%
  filter(n > 200000) %>% 
  mutate(
    lower_ci = avg_arr_delay - qt(0.975, df = n - 1) * sd_arr_delay / sqrt(n),
    upper_ci = avg_arr_delay + qt(0.975, df = n - 1) * sd_arr_delay / sqrt(n)
  )
total_mean_delay_filtered <- mean(carrier_summary_ci$avg_arr_delay, na.rm = TRUE)

# Create the plot
ggplot(carrier_summary_ci, aes(x = carrier_name, y = avg_arr_delay)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) + 
  geom_hline(yintercept = total_mean_delay_filtered, linetype = "dashed", color = "red") + 
  labs(
    title = "Average Arrival Delays by Carrier",
    x = "Carrier",
    y = "Average Arrival Delay (minutes)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

- This visualization shows the average arrival delay for the largest five airlines (filtered for carriers with over 200,000 flights in the given period). The standard deviations for these airlines are fairly small, indicating a low variability in the arrival delays for these airlines. 


```{r}
#| echo: false

airport_loc <- read.csv("usa-airports.csv")
head(airport_loc)



# Load necessary libraries
library(maps)
library(ggmap)



delays_with_loc <- Delays1 %>%
  group_by(origin) %>%
  summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
  left_join(airport_loc, by = c("origin" = "iata")) %>%
  na.omit()

delays_with_loc$longitude <- as.numeric(delays_with_loc$longitude)
delays_with_loc$latitude <- as.numeric(delays_with_loc$latitude)

us_map <- map_data("state")
alaska_map <- map_data("world", "USA:Alaska")


combined_map <- rbind(us_map, alaska_map)

lon_limits <- c(-180, -60)  
lat_limits <- c(10, 80)

library(plotly)

base_map <- ggplot() +
  geom_polygon(data = combined_map, aes(x = long, y = lat, group = group), fill = "lightgrey") +
  geom_point(data = delays_with_loc, aes(x = longitude, y = latitude, color = avg_arr_delay), size = 3, alpha = 0.7) +
  scale_color_gradient(low = "green", high = "red", name = "Avg Arrival Delay (minutes)") +
  labs(title = "Heatmap of Average Arrival Delays by City",
       x = "Longitude",
       y = "Latitude") +
  coord_cartesian(xlim = lon_limits, ylim = lat_limits) +  # Set limits for longitude and latitude
  theme_minimal()

# Convert to interactive plot using plotly
interactive_map <- ggplotly(base_map)

# Display the interactive map
interactive_map

```






- Airport location information downloaded fom <https://data.humdata.org/dataset/ourairports-usa?>
```{r}
#| echo: false
head(delays_with_loc)
summary(delays_with_loc)


```


```{r}
#| echo: false

```


```{r}
#| echo: false

```


```{r}
#| echo: false

```


```{r}
#| echo: false

```


